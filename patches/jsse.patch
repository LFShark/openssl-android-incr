--- openssl-1.0.1m.orig/ssl/ssl.h	2016-11-28 14:11:11.694966139 +0000
+++ openssl-1.0.1m/ssl/ssl.h	2016-11-28 14:11:12.022964139 +0000
@@ -668,25 +668,8 @@ struct ssl_session_st {
  * just freed (depending on the context's setting for freelist_max_len).
  */
 # define SSL_MODE_RELEASE_BUFFERS 0x00000010L
-<<<<<<<
 /*
  * Send the current time in the Random fields of the ClientHello and
-=======
- * TLS only.)  "Released" buffers are put onto a free-list in the context
- * or just freed (depending on the context's setting for freelist_max_len). */
-#define SSL_MODE_RELEASE_BUFFERS 0x00000010L
-<<<<<<<
-=======
-/* When set, clients may send application data before receipt of CCS
- * and Finished.  This mode enables full-handshakes to 'complete' in
- * one RTT. */
-#define SSL_MODE_HANDSHAKE_CUTTHROUGH 0x00000020L
-
-/* Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value,
- * they cannot be used to clear bits. */
->>>>>>>
-/* Send the current time in the Random fields of the ClientHello and
->>>>>>>
  * ServerHello records for compatibility with hypothetical implementations
  * that require it.
  */
@@ -1519,19 +1502,7 @@ struct ssl_st {
     /* ctx for SRP authentication */
     SRP_CTX srp_ctx;
 #  endif
-<<<<<<<
 };
-=======
-/* Is the SSL_connection established? */
-#define SSL_get_state(a)		SSL_state(a)
-#define SSL_is_init_finished(a)		(SSL_state(a) == SSL_ST_OK)
-#define SSL_in_init(a)			((SSL_state(a)&SSL_ST_INIT) && \
-					!SSL_cutthrough_complete(a))
-#define SSL_in_before(a)		(SSL_state(a)&SSL_ST_BEFORE)
-#define SSL_in_connect_init(a)		(SSL_state(a)&SSL_ST_CONNECT)
-#define SSL_in_accept_init(a)		(SSL_state(a)&SSL_ST_ACCEPT)
-int SSL_cutthrough_complete(const SSL *s);
->>>>>>>
 
 # endif
 
